package service;

import entity.ClientEntity;
import entity.VehicleEntity;
import jakarta.persistence.TypedQuery;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class VehicleService extends Service {

    /**
     * R√©cup√®re tous les v√©hicules.
     *
     * @return Liste de tous les v√©hicules.
     */
    public List<VehicleEntity> getAllVehicles() {
        try {
            String hql = "FROM VehicleEntity";
            TypedQuery<VehicleEntity> query = entityManager.createQuery(hql, VehicleEntity.class);
            return query.getResultList();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

//    public List<VehicleEntity> getAllPaidVehicles() {
//        try {
//            // On suppose que CommandEntity poss√®de une collection "commandLines" (de type List<CommandLineEntity>)
//            // et que CommandLineEntity poss√®de une propri√©t√© "vehicle".
//            String hql = "SELECT v FROM CommandLineEntity cl JOIN cl.vehicle v WHERE cl.command.commandStatus = 'Pay√©e'";
//            TypedQuery<VehicleEntity> query = entityManager.createQuery(hql, VehicleEntity.class);
//            List<VehicleEntity> vehicles = query.getResultList();
//
//// Regroupe les v√©hicules par nom de mod√®le et compte le nombre d'occurrences pour chaque mod√®le.
//            Map<String, Long> countByModel = vehicles.stream()
//                    .collect(Collectors.groupingBy(
//                            v -> v.getModel() != null ? v.getModel().getModelName() : "Inconnu",
//                            Collectors.counting()
//                    ));
//
//            // Affiche le r√©sultat dans la console (ou ailleurs selon vos besoins)
//            countByModel.forEach((model, count) ->
//                    System.out.println("Mod√®le : " + model + " - Ventes : " + count)
//            );
//
////            System.out.println(query.getResultList().stream().map(vehicle -> System.out.println()));
//            return query.getResultList();
//        } catch (Exception e) {
//            e.printStackTrace();
//            return null;
//        }
//    }

    public Map<String, Long> getSalesCountByVehicle() {
        try {
            String hql = "SELECT v.model.modelName, COUNT(cl) " +
                    "FROM CommandLineEntity cl " +
                    "JOIN cl.vehicle v " +
                    "JOIN cl.command c " +
                    "WHERE c.commandStatus = 'Pay√©e' " +
                    "GROUP BY v.model.modelName";
            TypedQuery<Object[]> query = entityManager.createQuery(hql, Object[].class);
            List<Object[]> results = query.getResultList();
            Map<String, Long> salesCount = new HashMap<>();
            for (Object[] result : results) {
                String modelName = (String) result[0];
                Long count = (Long) result[1];
                salesCount.put(modelName, count);
            }
            return salesCount;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }




    /**
     * R√©cup√®re les v√©hicules uniques bas√©s sur leur mod√®le.
     *
     * @return Liste de v√©hicules avec un mod√®le unique.
     */
    public List<VehicleEntity> getUniqueVehicles() {
        try {
            String hql = "SELECT v FROM VehicleEntity v GROUP BY v.model.idModel";
            TypedQuery<VehicleEntity> query = entityManager.createQuery(hql, VehicleEntity.class);
            return query.getResultList();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * R√©cup√®re un v√©hicule par son ID.
     *
     * @param vehicleId ID du v√©hicule.
     * @return L'entit√© VehicleEntity trouv√©e ou null.
     */
    public VehicleEntity getVehicleById(int vehicleId) {
        try {
            return entityManager.find(VehicleEntity.class, vehicleId);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * üî• R√©cup√®re les v√©hicules achet√©s ou poss√©d√©s par un client.
     *
     * @param client L'entit√© ClientEntity.
     * @return Liste des v√©hicules du client.
     */
    public List<VehicleEntity> getVehiclesByClient(ClientEntity client) {
        try {
            String hql = "SELECT v FROM VehicleEntity v WHERE v.client.idClient = :clientId";
            TypedQuery<VehicleEntity> query = entityManager.createQuery(hql, VehicleEntity.class);
            query.setParameter("clientId", client.getIdClient());
            return query.getResultList();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Ajoute un nouveau v√©hicule √† la base de donn√©es.
     *
     * @param vehicle L'entit√© VehicleEntity √† ajouter.
     * @return true si l'ajout est r√©ussi, false sinon.
     */
    public boolean addVehicle(VehicleEntity vehicle) {
        try {
            entityManager.getTransaction().begin();
            entityManager.persist(vehicle);
            entityManager.getTransaction().commit();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
            }
            return false;
        }
    }

    /**
     * Met √† jour un v√©hicule existant.
     *
     * @param vehicle L'entit√© VehicleEntity mise √† jour.
     * @return Le v√©hicule mis √† jour.
     */
    public VehicleEntity updateVehicle(VehicleEntity vehicle) {
        try {
            entityManager.getTransaction().begin();
            VehicleEntity updatedVehicle = entityManager.merge(vehicle);
            entityManager.getTransaction().commit();
            return updatedVehicle;
        } catch (Exception e) {
            e.printStackTrace();
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
            }
            return null;
        }
    }

    /**
     * Supprime un v√©hicule par son ID.
     *
     * @param vehicleId ID du v√©hicule √† supprimer.
     * @return true si la suppression a r√©ussi, false sinon.
     */
    public boolean deleteVehicle(int vehicleId) {
        try {
            entityManager.getTransaction().begin();
            VehicleEntity vehicle = entityManager.find(VehicleEntity.class, vehicleId);
            if (vehicle != null) {
                entityManager.remove(vehicle);
                entityManager.getTransaction().commit();
                return true;
            }
            entityManager.getTransaction().rollback();
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            if (entityManager.getTransaction().isActive()) {
                entityManager.getTransaction().rollback();
            }
            return false;
        }
    }
}
